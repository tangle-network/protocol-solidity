/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadRecipient, BadRecipientInterface } from "../BadRecipient";

const _abi = [
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b5060405162461bcd60e51b8152600401602690602f565b60405180910390fd5b60208082526021908201527f7468697320636f6e747261637420646f6573206e6f74206163636570742045546040820152600960fb1b60608201526080019056fea26469706673582212200935cc9d9702939fb67cd22cea37dd68cd59d0acdc12bf8a8361a307e30d76e064736f6c63430008000033";

export class BadRecipient__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadRecipient> {
    return super.deploy(overrides || {}) as Promise<BadRecipient>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BadRecipient {
    return super.attach(address) as BadRecipient;
  }
  connect(signer: Signer): BadRecipient__factory {
    return super.connect(signer) as BadRecipient__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadRecipientInterface {
    return new utils.Interface(_abi) as BadRecipientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadRecipient {
    return new Contract(address, _abi, signerOrProvider) as BadRecipient;
  }
}
