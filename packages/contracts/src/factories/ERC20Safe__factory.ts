/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20Safe, ERC20SafeInterface } from "../ERC20Safe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "fundERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102dc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806395601f0914610030575b600080fd5b61004361003e366004610186565b610045565b005b8261005281843085610058565b50505050565b610052846323b872dd60e01b85858560405160240161007993929190610221565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600080836001600160a01b0316836040516100c691906101e8565b6000604051808303816000865af19150503d8060008114610103576040519150601f19603f3d011682016040523d82523d6000602084013e610108565b606091505b5091509150816101335760405162461bcd60e51b815260040161012a9061027a565b60405180910390fd5b805115610052578080602001905181019061014e91906101c1565b6100525760405162461bcd60e51b815260040161012a90610245565b80356001600160a01b038116811461018157600080fd5b919050565b60008060006060848603121561019a578283fd5b6101a38461016a565b92506101b16020850161016a565b9150604084013590509250925092565b6000602082840312156101d2578081fd5b815180151581146101e1578182fd5b9392505050565b60008251815b8181101561020857602081860181015185830152016101ee565b818111156102165782828501525b509190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252818101527f45524332303a206f7065726174696f6e20646964206e6f742073756363656564604082015260600190565b602080825260129082015271115490cc8c0e8818d85b1b0819985a5b195960721b60408201526060019056fea26469706673582212206c96227a770128d3f1efc5d1c0abdbc045a9b59077ce15c316c800dc5cbd41d964736f6c63430008000033";

type ERC20SafeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20SafeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Safe__factory extends ContractFactory {
  constructor(...args: ERC20SafeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20Safe> {
    return super.deploy(overrides || {}) as Promise<ERC20Safe>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20Safe {
    return super.attach(address) as ERC20Safe;
  }
  connect(signer: Signer): ERC20Safe__factory {
    return super.connect(signer) as ERC20Safe__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20SafeInterface {
    return new utils.Interface(_abi) as ERC20SafeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Safe {
    return new Contract(address, _abi, signerOrProvider) as ERC20Safe;
  }
}
