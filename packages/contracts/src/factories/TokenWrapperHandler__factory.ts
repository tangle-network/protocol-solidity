/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, BytesLike, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { TokenWrapperHandler, TokenWrapperHandlerInterface } from '../TokenWrapperHandler';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'bridgeAddress',
        type: 'address',
      },
      {
        internalType: 'bytes32[]',
        name: 'initialResourceIDs',
        type: 'bytes32[]',
      },
      {
        internalType: 'address[]',
        name: 'initialContractAddresses',
        type: 'address[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: '_bridgeAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: '_contractAddressToResourceID',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: '_contractWhitelist',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    name: '_resourceIDToContractAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'resourceID',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'executeProposal',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newBridge',
        type: 'address',
      },
    ],
    name: 'migrateBridge',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'resourceID',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: 'contractAddress',
        type: 'address',
      },
    ],
    name: 'setResource',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162000b6038038062000b6083398101604081905262000034916200022e565b8051825114620000b05760405162461bcd60e51b815260206004820152603c60248201527f696e697469616c5265736f7572636549447320616e6420696e697469616c436f60448201527f6e7472616374416464726573736573206c656e206d69736d6174636800000000606482015260840160405180910390fd5b600080546001600160a01b0319166001600160a01b0385161781555b8251811015620001355762000120838281518110620000ef57620000ef62000393565b60200260200101518383815181106200010c576200010c62000393565b60200260200101516200013f60201b60201c565b806200012c8162000369565b915050620000cc565b50505050620003bf565b600082815260016020818152604080842080546001600160a01b039096166001600160a01b0319909616861790559383526002815283832094909455600390935220805460ff19169091179055565b80516001600160a01b0381168114620001a657600080fd5b919050565b600082601f830112620001bd57600080fd5b81516020620001d6620001d08362000343565b62000310565b80838252828201915082860187848660051b8901011115620001f757600080fd5b60005b8581101562000221576200020e826200018e565b84529284019290840190600101620001fa565b5090979650505050505050565b6000806000606084860312156200024457600080fd5b6200024f846200018e565b602085810151919450906001600160401b03808211156200026f57600080fd5b818701915087601f8301126200028457600080fd5b815162000295620001d08262000343565b8082825285820191508585018b878560051b8801011115620002b657600080fd5b600095505b83861015620002db578051835260019590950194918601918601620002bb565b5060408a01519097509450505080831115620002f657600080fd5b50506200030686828701620001ab565b9150509250925092565b604051601f8201601f191681016001600160401b03811182821017156200033b576200033b620003a9565b604052919050565b60006001600160401b038211156200035f576200035f620003a9565b5060051b60200190565b60006000198214156200038c57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61079180620003cf6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c54c2a111161005b578063c54c2a11146100fa578063d7f5b35914610123578063e248cff214610136578063ec97d3b41461014957600080fd5b8063318c136e146100825780637f79bea8146100b2578063b8fa3736146100e5575b600080fd5b600054610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d56100c036600461059e565b60036020526000908152604090205460ff1681565b60405190151581526020016100a9565b6100f86100f33660046105d9565b610177565b005b6100956101083660046105c0565b6001602052600090815260409020546001600160a01b031681565b6100f861013136600461059e565b6101cf565b6100f8610144366004610605565b6101f9565b61016961015736600461059e565b60026020526000908152604090205481565b6040519081526020016100a9565b61017f610526565b600082815260016020818152604080842080546001600160a01b0319166001600160a01b0387169081179091558452600282528084208690556003909152909120805460ff191690911790555050565b6101d7610526565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b610201610526565b60008036816102136020828789610681565b61021c9161070e565b935061022c602460208789610681565b6102359161072d565b92506102448560248189610681565b60008981526001602052604090205491935091506001600160a01b0316806001600160e01b03198516630615723960e51b141561032757600061028a6004828688610681565b6102939161072d565b60e01c905060006102a8600660048789610681565b6102b1916106ab565b604051630615723960e51b815260f09190911c6004820181905263ffffffff8416602483015291506001600160a01b0384169063c2ae4720906044015b600060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b50505050505061051b565b6001600160e01b03198516637e4bd32960e11b14156103b757600061034f6004828688610681565b6103589161072d565b60e01c9050600061036d601860048789610681565b610376916106db565b604051637e4bd32960e11b815260609190911c6004820181905263ffffffff8416602483015291506001600160a01b0384169063fc97a652906044016102ee565b6001600160e01b03198516630e250a1b60e11b14156104475760006103df6004828688610681565b6103e89161072d565b60e01c905060006103fd601860048789610681565b610406916106db565b604051630e250a1b60e11b815260609190911c6004820181905263ffffffff8416602483015291506001600160a01b03841690631c4a1436906044016102ee565b6001600160e01b031985166301c613c760e21b14156104d757600061046f6004828688610681565b6104789161072d565b60e01c9050600061048d601860048789610681565b610496916106db565b6040516301c613c760e21b815260609190911c6004820181905263ffffffff8416602483015291506001600160a01b038416906307184f1c906044016102ee565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c69642066756e6374696f6e2073696760601b60448201526064015b60405180910390fd5b505050505050505050565b6000546001600160a01b031633146105805760405162461bcd60e51b815260206004820152601e60248201527f73656e646572206d7573742062652062726964676520636f6e747261637400006044820152606401610512565b565b80356001600160a01b038116811461059957600080fd5b919050565b6000602082840312156105b057600080fd5b6105b982610582565b9392505050565b6000602082840312156105d257600080fd5b5035919050565b600080604083850312156105ec57600080fd5b823591506105fc60208401610582565b90509250929050565b60008060006040848603121561061a57600080fd5b83359250602084013567ffffffffffffffff8082111561063957600080fd5b818601915086601f83011261064d57600080fd5b81358181111561065c57600080fd5b87602082850101111561066e57600080fd5b6020830194508093505050509250925092565b6000808585111561069157600080fd5b8386111561069e57600080fd5b5050820193919092039150565b6001600160f01b031981358181169160028510156106d35780818660020360031b1b83161692505b505092915050565b6bffffffffffffffffffffffff1981358181169160148510156106d35760149490940360031b84901b1690921692915050565b8035602083101561072757600019602084900360031b1b165b92915050565b6001600160e01b031981358181169160048510156106d35760049490940360031b84901b169092169291505056fea2646970667358221220e284ea5b409ba4f34351562dd1b879b1229bae1a33ffd64aa9dc5a734a99feab64736f6c63430008050033';

export class TokenWrapperHandler__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    bridgeAddress: string,
    initialResourceIDs: BytesLike[],
    initialContractAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenWrapperHandler> {
    return super.deploy(
      bridgeAddress,
      initialResourceIDs,
      initialContractAddresses,
      overrides || {}
    ) as Promise<TokenWrapperHandler>;
  }
  getDeployTransaction(
    bridgeAddress: string,
    initialResourceIDs: BytesLike[],
    initialContractAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(bridgeAddress, initialResourceIDs, initialContractAddresses, overrides || {});
  }
  attach(address: string): TokenWrapperHandler {
    return super.attach(address) as TokenWrapperHandler;
  }
  connect(signer: Signer): TokenWrapperHandler__factory {
    return super.connect(signer) as TokenWrapperHandler__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenWrapperHandlerInterface {
    return new utils.Interface(_abi) as TokenWrapperHandlerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TokenWrapperHandler {
    return new Contract(address, _abi, signerOrProvider) as TokenWrapperHandler;
  }
}
