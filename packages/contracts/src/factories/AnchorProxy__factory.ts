/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AnchorProxy,
  AnchorProxyInterface,
  AnchorStructStruct,
} from "../AnchorProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_anchorTrees",
        type: "address",
      },
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IAnchor",
            name: "addr",
            type: "address",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "token",
                type: "address",
              },
              {
                internalType: "enum AnchorProxy.InstanceState",
                name: "state",
                type: "uint8",
              },
            ],
            internalType: "struct AnchorProxy.Instance",
            name: "instance",
            type: "tuple",
          },
        ],
        internalType: "struct AnchorProxy.AnchorStruct[]",
        name: "_instances",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IAnchor",
        name: "anchor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "AnchorProxyDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "encryptedNote",
        type: "bytes",
      },
    ],
    name: "EncryptedNote",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IAnchor",
        name: "instance",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum AnchorProxy.InstanceState",
        name: "state",
        type: "uint8",
      },
    ],
    name: "InstanceStateUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "anchorTrees",
    outputs: [
      {
        internalType: "contract IAnchorTrees",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "_encryptedNotes",
        type: "bytes[]",
      },
    ],
    name: "backupNotes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAnchor",
        name: "_anchor",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_encryptedNote",
        type: "bytes",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAnchor",
        name: "",
        type: "address",
      },
    ],
    name: "instances",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "enum AnchorProxy.InstanceState",
        name: "state",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAnchor",
        name: "_anchor",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "_roots",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "_nullifierHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "_refreshCommitment",
            type: "bytes32",
          },
          {
            internalType: "address payable",
            name: "_recipient",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "_relayer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "_fee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_refund",
            type: "uint256",
          },
        ],
        internalType: "struct IAnchor.PublicInputs",
        name: "_publicInputs",
        type: "tuple",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001adc38038062001adc8339810160408190526200003491620006a9565b600080546001600160a01b0319166001600160a01b038516178155606083901b6001600160601b0319166080525b8151811015620000ba57620000a58282815181106200009157634e487b7160e01b600052603260045260246000fd5b6020026020010151620000c460201b60201c565b80620000b18162000abb565b91505062000062565b5050505062000b12565b60208181015182516001600160a01b0390811660009081526001845260409020825181546001600160a01b031916921691909117808255928201519192909190829060ff60a01b1916600160a01b8360028111156200013357634e487b7160e01b600052602160045260246000fd5b0217905550905050600081600001516001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017b57600080fd5b505afa15801562000190573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b691906200068a565b90508160200151600001516001600160a01b0316816001600160a01b031614620001fd5760405162461bcd60e51b8152600401620001f49062000955565b60405180910390fd5b8151604051636eb1769f60e11b81526000916001600160a01b0384169163dd62ed3e9162000231913091906004016200087e565b60206040518083038186803b1580156200024a57600080fd5b505afa1580156200025f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000285919062000847565b905060008360200151602001516002811115620002b257634e487b7160e01b600052602160045260246000fd5b14158015620002bf575080155b15620002f657620002f08360000151600019846001600160a01b0316620003b260201b6200069a179092919060201c565b6200035e565b600083602001516020015160028111156200032157634e487b7160e01b600052602160045260246000fd5b1480156200032e57508015155b156200035e576200035e83600001516000846001600160a01b0316620003b260201b6200069a179092919060201c565b82600001516001600160a01b03167f02826f62d88a4d9f1978eb9c06f8663f642d032908e65a915d5898f3585421c0846020015160200151604051620003a59190620008b1565b60405180910390a2505050565b801580620004415750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90620003eb90309086906004016200087e565b60206040518083038186803b1580156200040457600080fd5b505afa15801562000419573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043f919062000847565b155b620004605760405162461bcd60e51b8152600401620001f490620009ff565b620004bb8363095ea7b360e01b84846040516024016200048292919062000898565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b0393841617905290620004c016565b505050565b60006200051c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200055c60201b62000794179092919060201c565b805190915015620004bb57808060200190518101906200053d919062000825565b620004bb5760405162461bcd60e51b8152600401620001f490620009b5565b60606200056d848460008562000577565b90505b9392505050565b6060824710156200059c5760405162461bcd60e51b8152600401620001f4906200090f565b620005a78562000646565b620005c65760405162461bcd60e51b8152600401620001f4906200097e565b600080866001600160a01b03168587604051620005e4919062000860565b60006040518083038185875af1925050503d806000811462000623576040519150601f19603f3d011682016040523d82523d6000602084013e62000628565b606091505b5090925090506200063b8282866200064c565b979650505050505050565b3b151590565b606083156200065d57508162000570565b8251156200066e5782518084602001fd5b8160405162461bcd60e51b8152600401620001f49190620008da565b6000602082840312156200069c578081fd5b8151620005708162000af9565b60008060006060808587031215620006bf578283fd5b8451620006cc8162000af9565b80945050602080860151620006e18162000af9565b604087810151919550906001600160401b038082111562000700578586fd5b818901915089601f83011262000714578586fd5b81518181111562000729576200072962000ae3565b62000738858683020162000a5c565b81815285810190848701888402860188018e10156200075557898afd5b8995505b838610156200081257808e038981121562000772578a8bfd5b875188810181811088821117156200078e576200078e62000ae3565b895282516200079d8162000af9565b8152601f198201891315620007b0578b8cfd5b885191508882018281108882111715620007ce57620007ce62000ae3565b8952828a0151620007df8162000af9565b82528289015160038110620007f2578c8dfd5b828b0152808a019190915283526001959095019491870191880162000759565b5080985050505050505050509250925092565b60006020828403121562000837578081fd5b8151801515811462000570578182fd5b60006020828403121562000859578081fd5b5051919050565b600082516200087481846020870162000a88565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020810160038310620008d457634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082528251806020840152620008fb81604085016020870162000a88565b601f01601f19169190910160400192915050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252600f908201526e24b731b7b93932b1ba103a37b5b2b760891b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6040518181016001600160401b038111828210171562000a805762000a8062000ae3565b604052919050565b60005b8381101562000aa557818101518382015260200162000a8b565b8381111562000ab5576000848401525b50505050565b600060001982141562000adc57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000b0f57600080fd5b50565b60805160601c610fab62000b3160003960006104130152610fab6000f3fe6080604052600436106100555760003560e01c8063032bb4431461005a57806313d98d13146100915780635aa6e675146100a65780636485ba2a146100c8578063819f3f6e146100e85780639b742c01146100fb575b600080fd5b34801561006657600080fd5b5061007a610075366004610a47565b610110565b604051610088929190610d03565b60405180910390f35b6100a461009f366004610a63565b610137565b005b3480156100b257600080fd5b506100bb610411565b6040516100889190610ba5565b3480156100d457600080fd5b506100a46100e33660046109b8565b610435565b6100a46100f6366004610abd565b6104c1565b34801561010757600080fd5b506100bb61068b565b6001602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b6001600160a01b0384811660009081526001602090815260408083208151808301909252805494851682529293909291830190600160a01b900460ff16600281111561019357634e487b7160e01b600052602160045260246000fd5b60028111156101b257634e487b7160e01b600052602160045260246000fd5b90525090506000816020015160028111156101dd57634e487b7160e01b600052602160045260246000fd5b14156102045760405162461bcd60e51b81526004016101fb90610db7565b60405180910390fd5b61028d3330876001600160a01b0316631fc601c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561024257600080fd5b505afa158015610256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027a9190610b3a565b84516001600160a01b03169291906107ad565b60405163b214faa560e01b81526001600160a01b0386169063b214faa59034906102bb908890600401610c10565b6000604051808303818588803b1580156102d457600080fd5b505af11580156102e8573d6000803e3d6000fd5b50600293506102f692505050565b8160200151600281111561031a57634e487b7160e01b600052602160045260246000fd5b14156103855760005460405163c6758d6b60e01b81526001600160a01b039091169063c6758d6b906103529088908890600401610bf7565b600060405180830381600087803b15801561036c57600080fd5b505af1158015610380573d6000803e3d6000fd5b505050505b336001600160a01b03167ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b400884846040516103c0929190610c19565b60405180910390a283856001600160a01b03167f9b67bf8d9bdb6ca1dea766b1c29a50016a9866d8535037b427206ca18e82bfcc426040516104029190610c10565b60405180910390a35050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b818110156104bc57337ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b400884848481811061048257634e487b7160e01b600052603260045260246000fd5b90506020028101906104949190610ec5565b6040516104a2929190610c19565b60405180910390a2806104b481610f36565b915050610438565b505050565b6001600160a01b0384811660009081526001602090815260408083208151808301909252805494851682529293909291830190600160a01b900460ff16600281111561051d57634e487b7160e01b600052602160045260246000fd5b600281111561053c57634e487b7160e01b600052602160045260246000fd5b905250905060008160200151600281111561056757634e487b7160e01b600052602160045260246000fd5b14156105855760405162461bcd60e51b81526004016101fb90610db7565b60405163687469a560e11b81526001600160a01b0386169063d0e8d34a9034906105b790889088908890600401610c2d565b6000604051808303818588803b1580156105d057600080fd5b505af11580156105e4573d6000803e3d6000fd5b50600293506105f292505050565b8160200151600281111561061657634e487b7160e01b600052602160045260246000fd5b141561068457600054604051620d70c960e51b81526001600160a01b03909116906301ae192090610651908890602087013590600401610bf7565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b505050505b5050505050565b6000546001600160a01b031681565b8015806107225750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906106d09030908690600401610bb9565b60206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190610b3a565b155b61073e5760405162461bcd60e51b81526004016101fb90610e6f565b6104bc8363095ea7b360e01b848460405160240161075d929190610bf7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107d4565b60606107a38484600085610863565b90505b9392505050565b6107ce846323b872dd60e01b85858560405160240161075d93929190610bd3565b50505050565b6000610829826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107949092919063ffffffff16565b8051909150156104bc57808060200190518101906108479190610a27565b6104bc5760405162461bcd60e51b81526004016101fb90610e25565b6060824710156108855760405162461bcd60e51b81526004016101fb90610d71565b61088e85610923565b6108aa5760405162461bcd60e51b81526004016101fb90610dee565b600080866001600160a01b031685876040516108c69190610b89565b60006040518083038185875af1925050503d8060008114610903576040519150601f19603f3d011682016040523d82523d6000602084013e610908565b606091505b509150915061091882828661092d565b979650505050505050565b803b15155b919050565b6060831561093c5750816107a6565b82511561094c5782518084602001fd5b8160405162461bcd60e51b81526004016101fb9190610d3e565b803561092881610f5d565b60008083601f840112610982578182fd5b50813567ffffffffffffffff811115610999578182fd5b6020830191508360208285010111156109b157600080fd5b9250929050565b600080602083850312156109ca578182fd5b823567ffffffffffffffff808211156109e1578384fd5b818501915085601f8301126109f4578384fd5b813581811115610a02578485fd5b8660208083028501011115610a15578485fd5b60209290920196919550909350505050565b600060208284031215610a38578081fd5b815180151581146107a6578182fd5b600060208284031215610a58578081fd5b81356107a681610f5d565b60008060008060608587031215610a78578182fd5b8435610a8381610f5d565b935060208501359250604085013567ffffffffffffffff811115610aa5578283fd5b610ab187828801610971565b95989497509550505050565b60008060008060608587031215610ad2578384fd5b8435610add81610f5d565b9350602085013567ffffffffffffffff80821115610af9578485fd5b610b0588838901610971565b90955093506040870135915080821115610b1d578283fd5b50850160e08188031215610b2f578182fd5b939692955090935050565b600060208284031215610b4b578081fd5b5051919050565b6001600160a01b03169052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008251610b9b818460208701610f0a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b6000602082526107a3602083018486610b5f565b600060408252610c41604083018587610b5f565b82810360208401528335601e19853603018112610c5c578283fd5b8401803567ffffffffffffffff811115610c74578384fd5b803603861315610c82578384fd5b60e08352610c9760e084018260208501610b5f565b9150506020850135602083015260408501356040830152610cba60608601610966565b610cc76060840182610b52565b50610cd460808601610966565b610ce16080840182610b52565b5060a085013560a083015260c085013560c08301528092505050949350505050565b6001600160a01b03831681526040810160038310610d3157634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6000602082528251806020840152610d5d816040850160208701610f0a565b601f01601f19169190910160400192915050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601d908201527f54686520696e7374616e6365206973206e6f7420737570706f72746564000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6000808335601e19843603018112610edb578283fd5b83018035915067ffffffffffffffff821115610ef5578283fd5b6020019150368190038213156109b157600080fd5b60005b83811015610f25578181015183820152602001610f0d565b838111156107ce5750506000910152565b6000600019821415610f5657634e487b7160e01b81526011600452602481fd5b5060010190565b6001600160a01b0381168114610f7257600080fd5b5056fea2646970667358221220b070b25e4979bf05aa9c3e644e6f0ee6a2d0b029f01f5a661d3422a73e1a895764736f6c63430008000033";

type AnchorProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnchorProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnchorProxy__factory extends ContractFactory {
  constructor(...args: AnchorProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _anchorTrees: string,
    _governance: string,
    _instances: AnchorStructStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnchorProxy> {
    return super.deploy(
      _anchorTrees,
      _governance,
      _instances,
      overrides || {}
    ) as Promise<AnchorProxy>;
  }
  getDeployTransaction(
    _anchorTrees: string,
    _governance: string,
    _instances: AnchorStructStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _anchorTrees,
      _governance,
      _instances,
      overrides || {}
    );
  }
  attach(address: string): AnchorProxy {
    return super.attach(address) as AnchorProxy;
  }
  connect(signer: Signer): AnchorProxy__factory {
    return super.connect(signer) as AnchorProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnchorProxyInterface {
    return new utils.Interface(_abi) as AnchorProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnchorProxy {
    return new Contract(address, _abi, signerOrProvider) as AnchorProxy;
  }
}
