/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AnchorProxy, AnchorProxyInterface } from "../AnchorProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_anchorTrees",
        type: "address",
      },
      {
        internalType: "address",
        name: "_governance",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IFixedDepositAnchor",
            name: "addr",
            type: "address",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "token",
                type: "address",
              },
              {
                internalType: "enum AnchorProxy.InstanceState",
                name: "state",
                type: "uint8",
              },
            ],
            internalType: "struct AnchorProxy.Instance",
            name: "instance",
            type: "tuple",
          },
        ],
        internalType: "struct AnchorProxy.AnchorStruct[]",
        name: "_instances",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IFixedDepositAnchor",
        name: "anchor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "AnchorProxyDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "encryptedNote",
        type: "bytes",
      },
    ],
    name: "EncryptedNote",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IFixedDepositAnchor",
        name: "instance",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum AnchorProxy.InstanceState",
        name: "state",
        type: "uint8",
      },
    ],
    name: "InstanceStateUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "anchorTrees",
    outputs: [
      {
        internalType: "contract IAnchorTrees",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "_encryptedNotes",
        type: "bytes[]",
      },
    ],
    name: "backupNotes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFixedDepositAnchor",
        name: "_anchor",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_encryptedNote",
        type: "bytes",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFixedDepositAnchor",
        name: "",
        type: "address",
      },
    ],
    name: "instances",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "enum AnchorProxy.InstanceState",
        name: "state",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFixedDepositAnchor",
        name: "_anchor",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "_roots",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "_nullifierHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "_refreshCommitment",
            type: "bytes32",
          },
          {
            internalType: "address payable",
            name: "_recipient",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "_relayer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "_fee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_refund",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "_extDataHash",
            type: "bytes32",
          },
        ],
        internalType: "struct IFixedDepositAnchor.PublicInputs",
        name: "_publicInputs",
        type: "tuple",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620019f5380380620019f583398101604081905262000034916200078b565b600080546001600160a01b0319166001600160a01b038516178155606083901b6001600160601b0319166080525b8151811015620000ae576200009982828151811062000085576200008562000a73565b6020026020010151620000b860201b60201c565b80620000a58162000a33565b91505062000062565b5050505062000ab8565b60208082015182516001600160a01b03908116600090815260018452604090208251815492166001600160a01b031983168117825593830151929390929183916001600160a81b031990911617600160a01b8360028111156200011f576200011f62000a5d565b0217905550905050600081600001516001600160a01b03166321df0da76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016757600080fd5b505afa1580156200017c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a291906200076b565b90508160200151600001516001600160a01b0316816001600160a01b031614620002055760405162461bcd60e51b815260206004820152600f60248201526e24b731b7b93932b1ba103a37b5b2b760891b60448201526064015b60405180910390fd5b8151604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015260009183169063dd62ed3e9060440160206040518083038186803b1580156200025257600080fd5b505afa15801562000267573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028d91906200090c565b905060008360200151602001516002811115620002ae57620002ae62000a5d565b14158015620002bb575080155b15620002f257620002ec8360000151600019846001600160a01b0316620003a260201b62000676179092919060201c565b6200034e565b6000836020015160200151600281111562000311576200031162000a5d565b1480156200031e57508015155b156200034e576200034e83600001516000846001600160a01b0316620003a260201b62000676179092919060201c565b82600001516001600160a01b03167f02826f62d88a4d9f1978eb9c06f8663f642d032908e65a915d5898f3585421c084602001516020015160405162000395919062000944565b60405180910390a2505050565b801580620004305750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015620003f357600080fd5b505afa15801562000408573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200042e91906200090c565b155b620004a45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401620001fc565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620004fc9185916200050116565b505050565b60006200055d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620005df60201b620007cd179092919060201c565b805190915015620004fc57808060200190518101906200057e9190620008e8565b620004fc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620001fc565b6060620005f08484600085620005fa565b90505b9392505050565b6060824710156200065d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620001fc565b843b620006ad5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620001fc565b600080866001600160a01b03168587604051620006cb919062000926565b60006040518083038185875af1925050503d80600081146200070a576040519150601f19603f3d011682016040523d82523d6000602084013e6200070f565b606091505b509092509050620007228282866200072d565b979650505050505050565b606083156200073e575081620005f3565b8251156200074f5782518084602001fd5b8160405162461bcd60e51b8152600401620001fc91906200096d565b6000602082840312156200077e57600080fd5b8151620005f38162000a9f565b60008060006060808587031215620007a257600080fd5b8451620007af8162000a9f565b80945050602080860151620007c48162000a9f565b604087810151919550906001600160401b0380821115620007e457600080fd5b818901915089601f830112620007f957600080fd5b8151818111156200080e576200080e62000a89565b6200081e858260051b01620009cd565b8181528581019250838601878302850187018d10156200083d57600080fd5b600094505b82851015620008d657808d03888112156200085c57600080fd5b62000866620009a2565b8251620008738162000a9f565b8152601f1982018813156200088757600080fd5b62000891620009a2565b915088830151620008a28162000a9f565b82528288015160038110620008b657600080fd5b828a01528089019190915284526001949094019392860192870162000842565b50809750505050505050509250925092565b600060208284031215620008fb57600080fd5b81518015158114620005f357600080fd5b6000602082840312156200091f57600080fd5b5051919050565b600082516200093a81846020870162000a00565b9190910192915050565b60208101600383106200096757634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526200098e81604085016020870162000a00565b601f01601f19169190910160400192915050565b604080519081016001600160401b0381118282101715620009c757620009c762000a89565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620009f857620009f862000a89565b604052919050565b60005b8381101562000a1d57818101518382015260200162000a03565b8381111562000a2d576000848401525b50505050565b600060001982141562000a5657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000ab557600080fd5b50565b60805160601c610f1f62000ad6600039600060ed0152610f1f6000f3fe6080604052600436106100555760003560e01c8063032bb4431461005a57806313d98d13146100b35780632f4db50c146100c85780635aa6e675146100db5780636485ba2a146101275780639b742c0114610147575b600080fd5b34801561006657600080fd5b5061009c610075366004610b47565b6001602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b6040516100aa929190610d9b565b60405180910390f35b6100c66100c1366004610b64565b610167565b005b6100c66100d6366004610bc0565b610435565b3480156100e757600080fd5b5061010f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100aa565b34801561013357600080fd5b506100c6610142366004610ab0565b6105f8565b34801561015357600080fd5b5060005461010f906001600160a01b031681565b6001600160a01b0384811660009081526001602090815260408083208151808301909252805494851682529293909291830190600160a01b900460ff1660028111156101b5576101b5610ea5565b60028111156101c6576101c6610ea5565b90525090506000816020015160028111156101e3576101e3610ea5565b14156102365760405162461bcd60e51b815260206004820152601d60248201527f54686520696e7374616e6365206973206e6f7420737570706f7274656400000060448201526064015b60405180910390fd5b6102bf3330876001600160a01b0316631fc601c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561027457600080fd5b505afa158015610288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ac9190610c42565b84516001600160a01b03169291906107e6565b60405163b214faa560e01b8152600481018590526001600160a01b0386169063b214faa59034906024016000604051808303818588803b15801561030257600080fd5b505af1158015610316573d6000803e3d6000fd5b506002935061032492505050565b8160200151600281111561033a5761033a610ea5565b14156103a75760005460405163c6758d6b60e01b81526001600160a01b038781166004830152602482018790529091169063c6758d6b90604401600060405180830381600087803b15801561038e57600080fd5b505af11580156103a2573d6000803e3d6000fd5b505050505b336001600160a01b03167ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b400884846040516103e2929190610ca0565b60405180910390a283856001600160a01b03167f9b67bf8d9bdb6ca1dea766b1c29a50016a9866d8535037b427206ca18e82bfcc4260405161042691815260200190565b60405180910390a35050505050565b6001600160a01b0384811660009081526001602090815260408083208151808301909252805494851682529293909291830190600160a01b900460ff16600281111561048357610483610ea5565b600281111561049457610494610ea5565b90525090506000816020015160028111156104b1576104b1610ea5565b14156104ff5760405162461bcd60e51b815260206004820152601d60248201527f54686520696e7374616e6365206973206e6f7420737570706f72746564000000604482015260640161022d565b60405163313c4aeb60e11b81526001600160a01b0386169063627895d690349061053190889088908890600401610cb4565b6000604051808303818588803b15801561054a57600080fd5b505af115801561055e573d6000803e3d6000fd5b506002935061056c92505050565b8160200151600281111561058257610582610ea5565b14156105f157600054604051620d70c960e51b81526001600160a01b03878116600483015260208501356024830152909116906301ae192090604401600060405180830381600087803b1580156105d857600080fd5b505af11580156105ec573d6000803e3d6000fd5b505050505b5050505050565b60005b8181101561067157337ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b400884848481811061063757610637610ebb565b90506020028101906106499190610e09565b604051610657929190610ca0565b60405180910390a28061066981610e7c565b9150506105fb565b505050565b8015806106ff5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190610c42565b155b61076a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161022d565b6040516001600160a01b03831660248201526044810182905261067190849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610824565b60606107dc84846000856108f6565b90505b9392505050565b6040516001600160a01b038085166024830152831660448201526064810182905261081e9085906323b872dd60e01b90608401610796565b50505050565b6000610879826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107cd9092919063ffffffff16565b80519091501561067157808060200190518101906108979190610b25565b6106715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161022d565b6060824710156109575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161022d565b843b6109a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161022d565b600080866001600160a01b031685876040516109c19190610c84565b60006040518083038185875af1925050503d80600081146109fe576040519150601f19603f3d011682016040523d82523d6000602084013e610a03565b606091505b5091509150610a13828286610a1e565b979650505050505050565b60608315610a2d5750816107df565b825115610a3d5782518084602001fd5b8160405162461bcd60e51b815260040161022d9190610dd6565b8035610a6281610ed1565b919050565b60008083601f840112610a7957600080fd5b50813567ffffffffffffffff811115610a9157600080fd5b602083019150836020828501011115610aa957600080fd5b9250929050565b60008060208385031215610ac357600080fd5b823567ffffffffffffffff80821115610adb57600080fd5b818501915085601f830112610aef57600080fd5b813581811115610afe57600080fd5b8660208260051b8501011115610b1357600080fd5b60209290920196919550909350505050565b600060208284031215610b3757600080fd5b815180151581146107df57600080fd5b600060208284031215610b5957600080fd5b81356107df81610ed1565b60008060008060608587031215610b7a57600080fd5b8435610b8581610ed1565b935060208501359250604085013567ffffffffffffffff811115610ba857600080fd5b610bb487828801610a67565b95989497509550505050565b60008060008060608587031215610bd657600080fd5b8435610be181610ed1565b9350602085013567ffffffffffffffff80821115610bfe57600080fd5b610c0a88838901610a67565b90955093506040870135915080821115610c2357600080fd5b5085016101008188031215610c3757600080fd5b939692955090935050565b600060208284031215610c5457600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008251610c96818460208701610e50565b9190910192915050565b6020815260006107dc602083018486610c5b565b604081526000610cc8604083018587610c5b565b82810360208401526101008435601e19863603018112610ce757600080fd5b8501803567ffffffffffffffff811115610d0057600080fd5b803603871315610d0f57600080fd5b828452610d228385018260208501610c5b565b925050506020850135602083015260408501356040830152610d4660608601610a57565b6001600160a01b03166060830152610d6060808601610a57565b6001600160a01b03811660808401525060a085013560a083015260c085013560c083015260e085013560e08301528092505050949350505050565b6001600160a01b03831681526040810160038310610dc957634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6020815260008251806020840152610df5816040850160208701610e50565b601f01601f19169190910160400192915050565b6000808335601e19843603018112610e2057600080fd5b83018035915067ffffffffffffffff821115610e3b57600080fd5b602001915036819003821315610aa957600080fd5b60005b83811015610e6b578181015183820152602001610e53565b8381111561081e5750506000910152565b6000600019821415610e9e57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610ee657600080fd5b5056fea2646970667358221220ed6b15091a7a3e1770df49f0b515754111011893ca7c2b8bf5be83a3502c7a0a64736f6c63430008050033";

export class AnchorProxy__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _anchorTrees: string,
    _governance: string,
    _instances: {
      addr: string;
      instance: { token: string; state: BigNumberish };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AnchorProxy> {
    return super.deploy(
      _anchorTrees,
      _governance,
      _instances,
      overrides || {}
    ) as Promise<AnchorProxy>;
  }
  getDeployTransaction(
    _anchorTrees: string,
    _governance: string,
    _instances: {
      addr: string;
      instance: { token: string; state: BigNumberish };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _anchorTrees,
      _governance,
      _instances,
      overrides || {}
    );
  }
  attach(address: string): AnchorProxy {
    return super.attach(address) as AnchorProxy;
  }
  connect(signer: Signer): AnchorProxy__factory {
    return super.connect(signer) as AnchorProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnchorProxyInterface {
    return new utils.Interface(_abi) as AnchorProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnchorProxy {
    return new Contract(address, _abi, signerOrProvider) as AnchorProxy;
  }
}
