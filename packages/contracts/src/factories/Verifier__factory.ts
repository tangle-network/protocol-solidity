/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Verifier, VerifierInterface } from "../Verifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVerifier2",
        name: "_verifier2",
        type: "address",
      },
      {
        internalType: "contract IVerifier3",
        name: "_verifier3",
        type: "address",
      },
      {
        internalType: "contract IVerifier4",
        name: "_verifier4",
        type: "address",
      },
      {
        internalType: "contract IVerifier5",
        name: "_verifier5",
        type: "address",
      },
      {
        internalType: "contract IVerifier6",
        name: "_verifier6",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "v2",
    outputs: [
      {
        internalType: "contract IVerifier2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v3",
    outputs: [
      {
        internalType: "contract IVerifier3",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v4",
    outputs: [
      {
        internalType: "contract IVerifier4",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v5",
    outputs: [
      {
        internalType: "contract IVerifier5",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v6",
    outputs: [
      {
        internalType: "contract IVerifier6",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "maxEdges",
        type: "uint8",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610a89380380610a8983398101604081905261002f91610091565b600080546001600160a01b03199081166001600160a01b0397881617909155600180548216958716959095179094556002805485169386169390931790925560038054841691851691909117905560048054909216921691909117905561011d565b600080600080600060a086880312156100a8578081fd5b85516100b381610105565b60208701519095506100c481610105565b60408701519094506100d581610105565b60608701519093506100e681610105565b60808701519092506100f781610105565b809150509295509295909350565b6001600160a01b038116811461011a57600080fd5b50565b61095d8061012c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806309c5e7061461006757806331473ebe146100855780636257a38e1461008d578063b4b764f214610095578063bfa57503146100b5578063f3acae3a146100bd575b600080fd5b61006f6100c5565b60405161007c91906108b2565b60405180910390f35b61006f6100d4565b61006f6100e3565b6100a86100a336600461058d565b6100f2565b60405161007c91906108a7565b61006f610315565b61006f610324565b6004546001600160a01b031681565b6003546001600160a01b031681565b6001546001600160a01b031681565b60008160ff16600114156101a5576000838060200190518101906101169190610663565b60005460405163c542c93b60e01b81529192506001600160a01b03169063c542c93b9061014d908a908a908a908790600401610856565b60206040518083038186803b15801561016557600080fd5b505afa158015610179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019d919061068f565b91505061030c565b8160ff16600214156101fe576000838060200190518101906101c7919061047d565b6001546040516379ddb87b60e11b81529192506001600160a01b03169063f3bb70f69061014d908a908a908a908790600401610706565b8160ff1660031415610257576000838060200190518101906102209190610502565b60025460405163b9c6ea8760e01b81529192506001600160a01b03169063b9c6ea879061014d908a908a908a908790600401610763565b8160ff16600414156102b0576000838060200190518101906102799190610535565b60035460405163465d607d60e11b81529192506001600160a01b031690638cbac0fa9061014d908a908a908a9087906004016107b4565b8160ff1660051415610308576000838060200190518101906102d29190610561565b600480546040516378a1d3af60e11b81529293506001600160a01b03169163f143a75e9161014d918b918b918b91889101610805565b5060005b95945050505050565b6002546001600160a01b031681565b6000546001600160a01b031681565b6000610346610341846108f0565b6108c6565b905080826020868187028601111561035d57600080fd5b60005b8681101561037c57825184529281019291810191600101610360565b505050509392505050565b600082601f830112610397578081fd5b6040516040810181811067ffffffffffffffff821117156103ba576103ba610911565b80604052508083856040860111156103d0578384fd5b835b60028110156103f15781358352602092830192909101906001016103d2565b509195945050505050565b600082601f83011261040c578081fd5b813567ffffffffffffffff81111561042657610426610911565b610439601f8201601f19166020016108c6565b81815284602083860101111561044d578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461047857600080fd5b919050565b6000610140808385031215610490578182fd5b83601f84011261049e578182fd5b60405181810181811067ffffffffffffffff821117156104c0576104c0610911565b60405280848381018710156104d3578485fd5b8493505b600a8410156104f7578051825260019390930192602091820191016104d7565b509095945050505050565b60006101608284031215610514578081fd5b82601f830112610522578081fd5b61052e83600b84610333565b9392505050565b60006101808284031215610547578081fd5b82601f830112610555578081fd5b61052e83600c84610333565b60006101a08284031215610573578081fd5b82601f830112610581578081fd5b61052e83600d84610333565b600080600080600061014086880312156105a5578081fd5b6105af8787610387565b9450604087605f8801126105c1578182fd5b60026105cf610341826108f0565b80838a0160c08b018c8111156105e3578687fd5b865b8581101561060b576105f78e84610387565b8552602090940193918601916001016105e5565b508299506106198d82610387565b985050505050505061010086013567ffffffffffffffff81111561063b578182fd5b610647888289016103fc565b9250506106576101208701610467565b90509295509295909350565b60006101208284031215610675578081fd5b82601f830112610683578081fd5b61052e83600984610333565b6000602082840312156106a0578081fd5b8151801515811461052e578182fd5b8060005b60028110156106dd576106c78483516106e3565b60409390930192602091909101906001016106b3565b50505050565b8060005b60028110156106dd5781518452602093840193909101906001016106e7565b610240810161071582876106e3565b61072260408301866106af565b61072f60c08301856106e3565b61010082018360005b600a811015610757578151835260209283019290910190600101610738565b50505095945050505050565b610260810161077282876106e3565b61077f60408301866106af565b61078c60c08301856106e3565b61010082018360005b600b811015610757578151835260209283019290910190600101610795565b61028081016107c382876106e3565b6107d060408301866106af565b6107dd60c08301856106e3565b61010082018360005b600c8110156107575781518352602092830192909101906001016107e6565b6102a0810161081482876106e3565b61082160408301866106af565b61082e60c08301856106e3565b61010082018360005b600d811015610757578151835260209283019290910190600101610837565b610220810161086582876106e3565b61087260408301866106af565b61087f60c08301856106e3565b61010082018360005b6009811015610757578151835260209283019290910190600101610888565b901515815260200190565b6001600160a01b0391909116815260200190565b60405181810167ffffffffffffffff811182821017156108e8576108e8610911565b604052919050565b600067ffffffffffffffff82111561090a5761090a610911565b5060200290565b634e487b7160e01b600052604160045260246000fdfea26469706673582212207b2d60468cb4bb3b14ee6374cf770c933b8b28a49855f0d3b53c38d54177ccb464736f6c63430008000033";

export class Verifier__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _verifier2: string,
    _verifier3: string,
    _verifier4: string,
    _verifier5: string,
    _verifier6: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Verifier> {
    return super.deploy(
      _verifier2,
      _verifier3,
      _verifier4,
      _verifier5,
      _verifier6,
      overrides || {}
    ) as Promise<Verifier>;
  }
  getDeployTransaction(
    _verifier2: string,
    _verifier3: string,
    _verifier4: string,
    _verifier5: string,
    _verifier6: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _verifier2,
      _verifier3,
      _verifier4,
      _verifier5,
      _verifier6,
      overrides || {}
    );
  }
  attach(address: string): Verifier {
    return super.attach(address) as Verifier;
  }
  connect(signer: Signer): Verifier__factory {
    return super.connect(signer) as Verifier__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new utils.Interface(_abi) as VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier {
    return new Contract(address, _abi, signerOrProvider) as Verifier;
  }
}
