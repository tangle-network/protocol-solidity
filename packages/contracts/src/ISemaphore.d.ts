/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISemaphoreInterface extends ethers.utils.Interface {
  functions: {
    "addMember(uint256,uint256)": FunctionFragment;
    "createGroup(uint256,uint8,address,uint8)": FunctionFragment;
    "decodeRoots(bytes)": FunctionFragment;
    "getLatestNeighborEdges(uint256)": FunctionFragment;
    "getRoot(uint256)": FunctionFragment;
    "removeMember(uint256,uint256,uint256[],uint8[])": FunctionFragment;
    "updateEdge(uint256,bytes32,uint32,bytes32)": FunctionFragment;
    "updateGroupAdmin(uint256,address)": FunctionFragment;
    "verifyProof(uint256,bytes32,uint256,uint256,bytes,uint256[8])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroup",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeRoots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestNeighborEdges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEdge",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGroupAdmin",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestNeighborEdges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateEdge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGroupAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "GroupAdminUpdated(uint256,address,address)": EventFragment;
    "ProofVerified(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GroupAdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProofVerified"): EventFragment;
}

export type GroupAdminUpdatedEvent = TypedEvent<
  [BigNumber, string, string] & {
    groupId: BigNumber;
    oldAdmin: string;
    newAdmin: string;
  }
>;

export type ProofVerifiedEvent = TypedEvent<
  [BigNumber, string] & { groupId: BigNumber; signal: string }
>;

export class ISemaphore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISemaphoreInterface;

  functions: {
    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createGroup(
      groupId: BigNumberish,
      depth: BigNumberish,
      admin: string,
      maxEdges: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decodeRoots(
      roots: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]] & { roots_decoded: string[] }>;

    getLatestNeighborEdges(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string] & {
          chainID: BigNumber;
          root: string;
          latestLeafIndex: BigNumber;
          srcResourceID: string;
        })[]
      ]
    >;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEdge(
      groupId: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      srcResourceID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGroupAdmin(
      groupId: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      roots: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMember(
    groupId: BigNumberish,
    identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createGroup(
    groupId: BigNumberish,
    depth: BigNumberish,
    admin: string,
    maxEdges: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decodeRoots(roots: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  getLatestNeighborEdges(
    groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, string] & {
      chainID: BigNumber;
      root: string;
      latestLeafIndex: BigNumber;
      srcResourceID: string;
    })[]
  >;

  getRoot(groupId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  removeMember(
    groupId: BigNumberish,
    identityCommitment: BigNumberish,
    proofSiblings: BigNumberish[],
    proofPathIndices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEdge(
    groupId: BigNumberish,
    root: BytesLike,
    leafIndex: BigNumberish,
    srcResourceID: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGroupAdmin(
    groupId: BigNumberish,
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyProof(
    groupId: BigNumberish,
    signal: BytesLike,
    nullifierHash: BigNumberish,
    externalNullifier: BigNumberish,
    roots: BytesLike,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createGroup(
      groupId: BigNumberish,
      depth: BigNumberish,
      admin: string,
      maxEdges: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decodeRoots(roots: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    getLatestNeighborEdges(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, string] & {
        chainID: BigNumber;
        root: string;
        latestLeafIndex: BigNumber;
        srcResourceID: string;
      })[]
    >;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateEdge(
      groupId: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      srcResourceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGroupAdmin(
      groupId: BigNumberish,
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      roots: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GroupAdminUpdated(uint256,address,address)"(
      groupId?: BigNumberish | null,
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { groupId: BigNumber; oldAdmin: string; newAdmin: string }
    >;

    GroupAdminUpdated(
      groupId?: BigNumberish | null,
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { groupId: BigNumber; oldAdmin: string; newAdmin: string }
    >;

    "ProofVerified(uint256,bytes32)"(
      groupId?: BigNumberish | null,
      signal?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { groupId: BigNumber; signal: string }
    >;

    ProofVerified(
      groupId?: BigNumberish | null,
      signal?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { groupId: BigNumber; signal: string }
    >;
  };

  estimateGas: {
    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createGroup(
      groupId: BigNumberish,
      depth: BigNumberish,
      admin: string,
      maxEdges: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decodeRoots(
      roots: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestNeighborEdges(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEdge(
      groupId: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      srcResourceID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGroupAdmin(
      groupId: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      roots: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createGroup(
      groupId: BigNumberish,
      depth: BigNumberish,
      admin: string,
      maxEdges: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decodeRoots(
      roots: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestNeighborEdges(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEdge(
      groupId: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      srcResourceID: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGroupAdmin(
      groupId: BigNumberish,
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      roots: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
