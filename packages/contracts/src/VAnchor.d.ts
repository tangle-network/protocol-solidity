/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface VAnchorInterface extends ethers.utils.Interface {
  functions: {
    'EVM_CHAIN_ID_TYPE()': FunctionFragment;
    'FIELD_SIZE()': FunctionFragment;
    'MAX_EXT_AMOUNT()': FunctionFragment;
    'MAX_FEE()': FunctionFragment;
    'ROOT_HISTORY_SIZE()': FunctionFragment;
    'ZERO_VALUE()': FunctionFragment;
    '_executeWrapping(address,uint256)': FunctionFragment;
    'calculatePublicAmount(int256,uint256)': FunctionFragment;
    'commitments(bytes32)': FunctionFragment;
    'configureMaximumDepositLimit(uint256,uint32)': FunctionFragment;
    'configureMinimalWithdrawalLimit(uint256,uint32)': FunctionFragment;
    'currentNeighborRootIndex(uint256)': FunctionFragment;
    'currentRootIndex()': FunctionFragment;
    'edgeExistsForChain(uint256)': FunctionFragment;
    'edgeIndex(uint256)': FunctionFragment;
    'edgeList(uint256)': FunctionFragment;
    'filledSubtrees(uint256)': FunctionFragment;
    'getChainId()': FunctionFragment;
    'getChainIdType()': FunctionFragment;
    'getLastRoot()': FunctionFragment;
    'getLatestNeighborEdges()': FunctionFragment;
    'getLatestNeighborRoots()': FunctionFragment;
    'getProposalNonce()': FunctionFragment;
    'handler()': FunctionFragment;
    'hasEdge(uint256)': FunctionFragment;
    'hashLeftRight(address,bytes32,bytes32)': FunctionFragment;
    'hasher()': FunctionFragment;
    'initialize(uint256,uint256)': FunctionFragment;
    'isKnownNeighborRoot(uint256,bytes32)': FunctionFragment;
    'isKnownRoot(bytes32)': FunctionFragment;
    'isSpent(bytes32)': FunctionFragment;
    'isSpentArray(bytes32[])': FunctionFragment;
    'isValidRoots(bytes32[])': FunctionFragment;
    'lastBalance()': FunctionFragment;
    'levels()': FunctionFragment;
    'maxEdges()': FunctionFragment;
    'maximumDepositAmount()': FunctionFragment;
    'minimalWithdrawalAmount()': FunctionFragment;
    'neighborRoots(uint256,uint32)': FunctionFragment;
    'nextIndex()': FunctionFragment;
    'nullifierHashes(bytes32)': FunctionFragment;
    'parseChainIdFromResourceId(bytes32)': FunctionFragment;
    'register((address,bytes))': FunctionFragment;
    'registerAndTransact((address,bytes),(bytes,bytes,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes))': FunctionFragment;
    'registerAndTransactWrap((address,bytes),(bytes,bytes,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes),address)': FunctionFragment;
    'roots(uint256)': FunctionFragment;
    'setHandler(address,uint32)': FunctionFragment;
    'setVerifier(address,uint32)': FunctionFragment;
    'token()': FunctionFragment;
    'transact((bytes,bytes,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes))': FunctionFragment;
    'transactWrap((bytes,bytes,bytes32[],bytes32[2],uint256,bytes32),(address,int256,address,uint256,bytes,bytes),address)': FunctionFragment;
    'unpackProof(uint256[8])': FunctionFragment;
    'unwrapIntoNative(address,uint256)': FunctionFragment;
    'unwrapIntoToken(address,uint256)': FunctionFragment;
    'updateEdge(bytes32,uint32,bytes32)': FunctionFragment;
    'verifier()': FunctionFragment;
    'withdrawAndUnwrap(address,address,uint256)': FunctionFragment;
    'wrapNative()': FunctionFragment;
    'wrapToken(address,uint256)': FunctionFragment;
    'zeros(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'EVM_CHAIN_ID_TYPE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FIELD_SIZE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_EXT_AMOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ROOT_HISTORY_SIZE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ZERO_VALUE', values?: undefined): string;
  encodeFunctionData(functionFragment: '_executeWrapping', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculatePublicAmount', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'commitments', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'configureMaximumDepositLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'configureMinimalWithdrawalLimit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'currentNeighborRootIndex', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'currentRootIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'edgeExistsForChain', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'edgeIndex', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'edgeList', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'filledSubtrees', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getChainId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getChainIdType', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLatestNeighborEdges', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLatestNeighborRoots', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProposalNonce', values?: undefined): string;
  encodeFunctionData(functionFragment: 'handler', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasEdge', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'hashLeftRight', values: [string, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'hasher', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isKnownNeighborRoot', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'isKnownRoot', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'isSpent', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'isSpentArray', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'isValidRoots', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'lastBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'levels', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxEdges', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maximumDepositAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minimalWithdrawalAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'neighborRoots', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'nextIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nullifierHashes', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'parseChainIdFromResourceId', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'register', values: [{ owner: string; publicKey: BytesLike }]): string;
  encodeFunctionData(
    functionFragment: 'registerAndTransact',
    values: [
      { owner: string; publicKey: BytesLike },
      {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'registerAndTransactWrap',
    values: [
      { owner: string; publicKey: BytesLike },
      {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: 'roots', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setHandler', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setVerifier', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transact',
    values: [
      {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'transactWrap',
    values: [
      {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'unpackProof',
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: 'unwrapIntoNative', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unwrapIntoToken', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateEdge', values: [BytesLike, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'verifier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawAndUnwrap', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'wrapNative', values?: undefined): string;
  encodeFunctionData(functionFragment: 'wrapToken', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'zeros', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'EVM_CHAIN_ID_TYPE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FIELD_SIZE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_EXT_AMOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ROOT_HISTORY_SIZE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ZERO_VALUE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_executeWrapping', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculatePublicAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commitments', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'configureMaximumDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'configureMinimalWithdrawalLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentNeighborRootIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentRootIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'edgeExistsForChain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'edgeIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'edgeList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'filledSubtrees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChainId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChainIdType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLatestNeighborEdges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLatestNeighborRoots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProposalNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'handler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasEdge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hashLeftRight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasher', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isKnownNeighborRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isKnownRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSpent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSpentArray', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidRoots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'levels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxEdges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maximumDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minimalWithdrawalAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'neighborRoots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nullifierHashes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'parseChainIdFromResourceId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerAndTransact', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerAndTransactWrap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transact', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transactWrap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpackProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unwrapIntoNative', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unwrapIntoToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateEdge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAndUnwrap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrapNative', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrapToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zeros', data: BytesLike): Result;

  events: {
    'EdgeAddition(uint256,uint256,bytes32)': EventFragment;
    'EdgeUpdate(uint256,uint256,bytes32)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Insertion(bytes32,uint32,uint256)': EventFragment;
    'NewCommitment(bytes32,uint256,bytes)': EventFragment;
    'NewNullifier(bytes32)': EventFragment;
    'PublicKey(address,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'EdgeAddition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EdgeUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Insertion'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCommitment'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewNullifier'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PublicKey'): EventFragment;
}

export type EdgeAdditionEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    chainID: BigNumber;
    latestLeafIndex: BigNumber;
    merkleRoot: string;
  }
>;

export type EdgeUpdateEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    chainID: BigNumber;
    latestLeafIndex: BigNumber;
    merkleRoot: string;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type InsertionEvent = TypedEvent<
  [string, number, BigNumber] & {
    commitment: string;
    leafIndex: number;
    timestamp: BigNumber;
  }
>;

export type NewCommitmentEvent = TypedEvent<
  [string, BigNumber, string] & {
    commitment: string;
    index: BigNumber;
    encryptedOutput: string;
  }
>;

export type NewNullifierEvent = TypedEvent<[string] & { nullifier: string }>;

export type PublicKeyEvent = TypedEvent<[string, string] & { owner: string; key: string }>;

export class VAnchor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VAnchorInterface;

  functions: {
    EVM_CHAIN_ID_TYPE(overrides?: CallOverrides): Promise<[string]>;

    FIELD_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<[number]>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    _executeWrapping(
      _tokenAddress: string,
      _extAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePublicAmount(
      _extAmount: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    configureMaximumDepositLimit(
      _maximumDepositAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configureMinimalWithdrawalLimit(
      _minimalWithdrawalAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentNeighborRootIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    currentRootIndex(overrides?: CallOverrides): Promise<[number]>;

    edgeExistsForChain(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    edgeIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    edgeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        chainID: BigNumber;
        root: string;
        latestLeafIndex: BigNumber;
        target: string;
      }
    >;

    filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChainIdType(overrides?: CallOverrides): Promise<[number]>;

    getLastRoot(overrides?: CallOverrides): Promise<[string]>;

    getLatestNeighborEdges(overrides?: CallOverrides): Promise<
      [
        ([BigNumber, string, BigNumber, string] & {
          chainID: BigNumber;
          root: string;
          latestLeafIndex: BigNumber;
          target: string;
        })[]
      ]
    >;

    getLatestNeighborRoots(overrides?: CallOverrides): Promise<[string[]]>;

    getProposalNonce(overrides?: CallOverrides): Promise<[number]>;

    handler(overrides?: CallOverrides): Promise<[string]>;

    hasEdge(_chainID: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    hashLeftRight(_hasher: string, _left: BytesLike, _right: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    hasher(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isKnownNeighborRoot(
      _neighborChainID: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<[boolean[]]>;

    isValidRoots(_roots: BytesLike[], overrides?: CallOverrides): Promise<[boolean]>;

    lastBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    levels(overrides?: CallOverrides): Promise<[number]>;

    maxEdges(overrides?: CallOverrides): Promise<[number]>;

    maximumDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimalWithdrawalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    neighborRoots(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    nextIndex(overrides?: CallOverrides): Promise<[number]>;

    nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    parseChainIdFromResourceId(_resourceId: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    register(
      _account: { owner: string; publicKey: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAndTransactWrap(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setHandler(
      _handler: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVerifier(
      _verifier: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transact(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactWrap(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber], [[BigNumber, BigNumber], [BigNumber, BigNumber]], [BigNumber, BigNumber]]>;

    unwrapIntoNative(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapIntoToken(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEdge(
      _root: BytesLike,
      _leafIndex: BigNumberish,
      _target: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    withdrawAndUnwrap(
      _tokenAddress: string,
      _recipient: string,
      _minusExtAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapNative(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    wrapToken(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  EVM_CHAIN_ID_TYPE(overrides?: CallOverrides): Promise<string>;

  FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

  ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  _executeWrapping(
    _tokenAddress: string,
    _extAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePublicAmount(_extAmount: BigNumberish, _fee: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  configureMaximumDepositLimit(
    _maximumDepositAmount: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configureMinimalWithdrawalLimit(
    _minimalWithdrawalAmount: BigNumberish,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentNeighborRootIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  currentRootIndex(overrides?: CallOverrides): Promise<number>;

  edgeExistsForChain(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  edgeIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  edgeList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string] & {
      chainID: BigNumber;
      root: string;
      latestLeafIndex: BigNumber;
      target: string;
    }
  >;

  filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getChainIdType(overrides?: CallOverrides): Promise<number>;

  getLastRoot(overrides?: CallOverrides): Promise<string>;

  getLatestNeighborEdges(overrides?: CallOverrides): Promise<
    ([BigNumber, string, BigNumber, string] & {
      chainID: BigNumber;
      root: string;
      latestLeafIndex: BigNumber;
      target: string;
    })[]
  >;

  getLatestNeighborRoots(overrides?: CallOverrides): Promise<string[]>;

  getProposalNonce(overrides?: CallOverrides): Promise<number>;

  handler(overrides?: CallOverrides): Promise<string>;

  hasEdge(_chainID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  hashLeftRight(_hasher: string, _left: BytesLike, _right: BytesLike, overrides?: CallOverrides): Promise<string>;

  hasher(overrides?: CallOverrides): Promise<string>;

  initialize(
    _minimalWithdrawalAmount: BigNumberish,
    _maximumDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isKnownNeighborRoot(_neighborChainID: BigNumberish, _root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<boolean[]>;

  isValidRoots(_roots: BytesLike[], overrides?: CallOverrides): Promise<boolean>;

  lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

  levels(overrides?: CallOverrides): Promise<number>;

  maxEdges(overrides?: CallOverrides): Promise<number>;

  maximumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minimalWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  neighborRoots(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

  nextIndex(overrides?: CallOverrides): Promise<number>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  parseChainIdFromResourceId(_resourceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  register(
    _account: { owner: string; publicKey: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAndTransact(
    _account: { owner: string; publicKey: BytesLike },
    _proofArgs: {
      proof: BytesLike;
      roots: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    _extData: {
      recipient: string;
      extAmount: BigNumberish;
      relayer: string;
      fee: BigNumberish;
      encryptedOutput1: BytesLike;
      encryptedOutput2: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAndTransactWrap(
    _account: { owner: string; publicKey: BytesLike },
    _proofArgs: {
      proof: BytesLike;
      roots: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    _extData: {
      recipient: string;
      extAmount: BigNumberish;
      relayer: string;
      fee: BigNumberish;
      encryptedOutput1: BytesLike;
      encryptedOutput2: BytesLike;
    },
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setHandler(
    _handler: string,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVerifier(
    _verifier: string,
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transact(
    _args: {
      proof: BytesLike;
      roots: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    _extData: {
      recipient: string;
      extAmount: BigNumberish;
      relayer: string;
      fee: BigNumberish;
      encryptedOutput1: BytesLike;
      encryptedOutput2: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactWrap(
    _args: {
      proof: BytesLike;
      roots: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    _extData: {
      recipient: string;
      extAmount: BigNumberish;
      relayer: string;
      fee: BigNumberish;
      encryptedOutput1: BytesLike;
      encryptedOutput2: BytesLike;
    },
    _tokenAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpackProof(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<[[BigNumber, BigNumber], [[BigNumber, BigNumber], [BigNumber, BigNumber]], [BigNumber, BigNumber]]>;

  unwrapIntoNative(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapIntoToken(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEdge(
    _root: BytesLike,
    _leafIndex: BigNumberish,
    _target: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  withdrawAndUnwrap(
    _tokenAddress: string,
    _recipient: string,
    _minusExtAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapNative(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  wrapToken(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EVM_CHAIN_ID_TYPE(overrides?: CallOverrides): Promise<string>;

    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    _executeWrapping(_tokenAddress: string, _extAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    calculatePublicAmount(_extAmount: BigNumberish, _fee: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    configureMaximumDepositLimit(
      _maximumDepositAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configureMinimalWithdrawalLimit(
      _minimalWithdrawalAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentNeighborRootIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    currentRootIndex(overrides?: CallOverrides): Promise<number>;

    edgeExistsForChain(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    edgeIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    edgeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        chainID: BigNumber;
        root: string;
        latestLeafIndex: BigNumber;
        target: string;
      }
    >;

    filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainIdType(overrides?: CallOverrides): Promise<number>;

    getLastRoot(overrides?: CallOverrides): Promise<string>;

    getLatestNeighborEdges(overrides?: CallOverrides): Promise<
      ([BigNumber, string, BigNumber, string] & {
        chainID: BigNumber;
        root: string;
        latestLeafIndex: BigNumber;
        target: string;
      })[]
    >;

    getLatestNeighborRoots(overrides?: CallOverrides): Promise<string[]>;

    getProposalNonce(overrides?: CallOverrides): Promise<number>;

    handler(overrides?: CallOverrides): Promise<string>;

    hasEdge(_chainID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    hashLeftRight(_hasher: string, _left: BytesLike, _right: BytesLike, overrides?: CallOverrides): Promise<string>;

    hasher(overrides?: CallOverrides): Promise<string>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isKnownNeighborRoot(_neighborChainID: BigNumberish, _root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<boolean[]>;

    isValidRoots(_roots: BytesLike[], overrides?: CallOverrides): Promise<boolean>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<number>;

    maxEdges(overrides?: CallOverrides): Promise<number>;

    maximumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimalWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    neighborRoots(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

    nextIndex(overrides?: CallOverrides): Promise<number>;

    nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    parseChainIdFromResourceId(_resourceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    register(_account: { owner: string; publicKey: BytesLike }, overrides?: CallOverrides): Promise<void>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    registerAndTransactWrap(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setHandler(_handler: string, _nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setVerifier(_verifier: string, _nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transact(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    transactWrap(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber], [[BigNumber, BigNumber], [BigNumber, BigNumber]], [BigNumber, BigNumber]]>;

    unwrapIntoNative(_tokenAddress: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unwrapIntoToken(_tokenAddress: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateEdge(
      _root: BytesLike,
      _leafIndex: BigNumberish,
      _target: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    withdrawAndUnwrap(
      _tokenAddress: string,
      _recipient: string,
      _minusExtAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapNative(overrides?: CallOverrides): Promise<void>;

    wrapToken(_tokenAddress: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'EdgeAddition(uint256,uint256,bytes32)'(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { chainID: BigNumber; latestLeafIndex: BigNumber; merkleRoot: string }
    >;

    EdgeAddition(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { chainID: BigNumber; latestLeafIndex: BigNumber; merkleRoot: string }
    >;

    'EdgeUpdate(uint256,uint256,bytes32)'(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { chainID: BigNumber; latestLeafIndex: BigNumber; merkleRoot: string }
    >;

    EdgeUpdate(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { chainID: BigNumber; latestLeafIndex: BigNumber; merkleRoot: string }
    >;

    'Initialized(uint8)'(version?: null): TypedEventFilter<[number], { version: number }>;

    Initialized(version?: null): TypedEventFilter<[number], { version: number }>;

    'Insertion(bytes32,uint32,uint256)'(
      commitment?: BytesLike | null,
      leafIndex?: null,
      timestamp?: null
    ): TypedEventFilter<[string, number, BigNumber], { commitment: string; leafIndex: number; timestamp: BigNumber }>;

    Insertion(
      commitment?: BytesLike | null,
      leafIndex?: null,
      timestamp?: null
    ): TypedEventFilter<[string, number, BigNumber], { commitment: string; leafIndex: number; timestamp: BigNumber }>;

    'NewCommitment(bytes32,uint256,bytes)'(
      commitment?: null,
      index?: null,
      encryptedOutput?: null
    ): TypedEventFilter<[string, BigNumber, string], { commitment: string; index: BigNumber; encryptedOutput: string }>;

    NewCommitment(
      commitment?: null,
      index?: null,
      encryptedOutput?: null
    ): TypedEventFilter<[string, BigNumber, string], { commitment: string; index: BigNumber; encryptedOutput: string }>;

    'NewNullifier(bytes32)'(nullifier?: null): TypedEventFilter<[string], { nullifier: string }>;

    NewNullifier(nullifier?: null): TypedEventFilter<[string], { nullifier: string }>;

    'PublicKey(address,bytes)'(
      owner?: string | null,
      key?: null
    ): TypedEventFilter<[string, string], { owner: string; key: string }>;

    PublicKey(owner?: string | null, key?: null): TypedEventFilter<[string, string], { owner: string; key: string }>;
  };

  estimateGas: {
    EVM_CHAIN_ID_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    _executeWrapping(
      _tokenAddress: string,
      _extAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePublicAmount(_extAmount: BigNumberish, _fee: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    configureMaximumDepositLimit(
      _maximumDepositAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configureMinimalWithdrawalLimit(
      _minimalWithdrawalAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentNeighborRootIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    currentRootIndex(overrides?: CallOverrides): Promise<BigNumber>;

    edgeExistsForChain(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    edgeIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    edgeList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainIdType(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestNeighborEdges(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestNeighborRoots(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalNonce(overrides?: CallOverrides): Promise<BigNumber>;

    handler(overrides?: CallOverrides): Promise<BigNumber>;

    hasEdge(_chainID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    hashLeftRight(_hasher: string, _left: BytesLike, _right: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    hasher(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isKnownNeighborRoot(
      _neighborChainID: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    isValidRoots(_roots: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<BigNumber>;

    maxEdges(overrides?: CallOverrides): Promise<BigNumber>;

    maximumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimalWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    neighborRoots(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    parseChainIdFromResourceId(_resourceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      _account: { owner: string; publicKey: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAndTransactWrap(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setHandler(
      _handler: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVerifier(
      _verifier: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transact(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactWrap(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unwrapIntoNative(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapIntoToken(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEdge(
      _root: BytesLike,
      _leafIndex: BigNumberish,
      _target: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAndUnwrap(
      _tokenAddress: string,
      _recipient: string,
      _minusExtAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapNative(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    wrapToken(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EVM_CHAIN_ID_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FIELD_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _executeWrapping(
      _tokenAddress: string,
      _extAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePublicAmount(
      _extAmount: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configureMaximumDepositLimit(
      _maximumDepositAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configureMinimalWithdrawalLimit(
      _minimalWithdrawalAmount: BigNumberish,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentNeighborRootIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRootIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    edgeExistsForChain(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    edgeIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    edgeList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    filledSubtrees(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainIdType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestNeighborEdges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestNeighborRoots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasEdge(_chainID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashLeftRight(
      _hasher: string,
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isKnownNeighborRoot(
      _neighborChainID: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSpent(_nullifierHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSpentArray(_nullifierHashes: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidRoots(_roots: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    levels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxEdges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimalWithdrawalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    neighborRoots(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseChainIdFromResourceId(_resourceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      _account: { owner: string; publicKey: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAndTransactWrap(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      _verifier: string,
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transact(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactWrap(
      _args: {
        proof: BytesLike;
        roots: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
      },
      _tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unwrapIntoNative(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapIntoToken(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEdge(
      _root: BytesLike,
      _leafIndex: BigNumberish,
      _target: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAndUnwrap(
      _tokenAddress: string,
      _recipient: string,
      _minusExtAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapNative(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    wrapToken(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
