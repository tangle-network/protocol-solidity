/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface VAnchorVerifierInterface extends ethers.utils.Interface {
  functions: {
    'v2_16()': FunctionFragment;
    'v2_2()': FunctionFragment;
    'v8_16()': FunctionFragment;
    'v8_2()': FunctionFragment;
    'verifyProof(uint256[2],uint256[2][2],uint256[2],bytes,uint8,bool)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'v2_16', values?: undefined): string;
  encodeFunctionData(functionFragment: 'v2_2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'v8_16', values?: undefined): string;
  encodeFunctionData(functionFragment: 'v8_2', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'verifyProof',
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      BytesLike,
      BigNumberish,
      boolean
    ]
  ): string;

  decodeFunctionResult(functionFragment: 'v2_16', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'v2_2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'v8_16', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'v8_2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyProof', data: BytesLike): Result;

  events: {};
}

export class VAnchorVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VAnchorVerifierInterface;

  functions: {
    v2_16(overrides?: CallOverrides): Promise<[string]>;

    v2_2(overrides?: CallOverrides): Promise<[string]>;

    v8_16(overrides?: CallOverrides): Promise<[string]>;

    v8_2(overrides?: CallOverrides): Promise<[string]>;

    verifyProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BytesLike,
      maxEdges: BigNumberish,
      smallInputs: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean] & { r: boolean }>;
  };

  v2_16(overrides?: CallOverrides): Promise<string>;

  v2_2(overrides?: CallOverrides): Promise<string>;

  v8_16(overrides?: CallOverrides): Promise<string>;

  v8_2(overrides?: CallOverrides): Promise<string>;

  verifyProof(
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    input: BytesLike,
    maxEdges: BigNumberish,
    smallInputs: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    v2_16(overrides?: CallOverrides): Promise<string>;

    v2_2(overrides?: CallOverrides): Promise<string>;

    v8_16(overrides?: CallOverrides): Promise<string>;

    v8_2(overrides?: CallOverrides): Promise<string>;

    verifyProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BytesLike,
      maxEdges: BigNumberish,
      smallInputs: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    v2_16(overrides?: CallOverrides): Promise<BigNumber>;

    v2_2(overrides?: CallOverrides): Promise<BigNumber>;

    v8_16(overrides?: CallOverrides): Promise<BigNumber>;

    v8_2(overrides?: CallOverrides): Promise<BigNumber>;

    verifyProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BytesLike,
      maxEdges: BigNumberish,
      smallInputs: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    v2_16(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v2_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v8_16(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v8_2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BytesLike,
      maxEdges: BigNumberish,
      smallInputs: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
