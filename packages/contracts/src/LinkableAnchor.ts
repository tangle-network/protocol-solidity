/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LinkableAnchorInterface extends utils.Interface {
  functions: {
    "NOTHING_UP_MY_SLEEVE_ZERO()": FunctionFragment;
    "ROOT_HISTORY_SIZE()": FunctionFragment;
    "addEdge(uint256,bytes32,uint256)": FunctionFragment;
    "addExternalNullifier(uint232)": FunctionFragment;
    "admin()": FunctionFragment;
    "bridge()": FunctionFragment;
    "broadcastSignal(bytes,uint256[8],bytes,uint256,uint232)": FunctionFragment;
    "currentNeighborRootIndex(uint256)": FunctionFragment;
    "currentRootIndex()": FunctionFragment;
    "deactivateExternalNullifier(uint232)": FunctionFragment;
    "edgeExistsForChain(uint256)": FunctionFragment;
    "edgeIndex(uint256)": FunctionFragment;
    "edgeList(uint256)": FunctionFragment;
    "externalNullifierLinkedList(uint232)": FunctionFragment;
    "firstExternalNullifier()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getLatestNeighborRoots()": FunctionFragment;
    "getNextExternalNullifier(uint232)": FunctionFragment;
    "getNumIdentityCommitments()": FunctionFragment;
    "handler()": FunctionFragment;
    "hasEdge(uint256)": FunctionFragment;
    "hash11(uint256[])": FunctionFragment;
    "hash5(uint256[5])": FunctionFragment;
    "hashLeftRight(uint256,uint256)": FunctionFragment;
    "insertIdentity(uint256)": FunctionFragment;
    "insertLeaf(uint256)": FunctionFragment;
    "isBroadcastPermissioned()": FunctionFragment;
    "isExternalNullifierActive(uint232)": FunctionFragment;
    "isKnownNeighborRoot(uint256,bytes32)": FunctionFragment;
    "isKnownRoot(bytes32)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isValidRoots(bytes32[])": FunctionFragment;
    "lastExternalNullifier()": FunctionFragment;
    "maxEdges()": FunctionFragment;
    "neighborRoots(uint256,uint32)": FunctionFragment;
    "nextIndex()": FunctionFragment;
    "nullifierHashHistory(uint256)": FunctionFragment;
    "numExternalNullifiers()": FunctionFragment;
    "owner()": FunctionFragment;
    "packProof(uint256[2],uint256[2][2],uint256[2])": FunctionFragment;
    "preBroadcastCheck(bytes,uint256[8],bytes,uint256,uint256,uint232)": FunctionFragment;
    "reactivateExternalNullifier(uint232)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "root()": FunctionFragment;
    "rootHistory(uint256)": FunctionFragment;
    "roots(uint256)": FunctionFragment;
    "setBridge(address)": FunctionFragment;
    "setHandler(address)": FunctionFragment;
    "setPermissioning(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpackProof(uint256[8])": FunctionFragment;
    "updateEdge(uint256,bytes32,uint256)": FunctionFragment;
    "verifier()": FunctionFragment;
    "zeroes(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NOTHING_UP_MY_SLEEVE_ZERO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEdge",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addExternalNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "broadcastSignal",
    values: [
      BytesLike,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNeighborRootIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateExternalNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "edgeExistsForChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "edgeIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "edgeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "externalNullifierLinkedList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "firstExternalNullifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestNeighborRoots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextExternalNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumIdentityCommitments",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "handler", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasEdge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hash11",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertIdentity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertLeaf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBroadcastPermissioned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isExternalNullifierActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownNeighborRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidRoots",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastExternalNullifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxEdges", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "neighborRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifierHashHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numExternalNullifiers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "preBroadcastCheck",
    values: [
      BytesLike,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateExternalNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rootHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setBridge", values: [string]): string;
  encodeFunctionData(functionFragment: "setHandler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPermissioning",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpackProof",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEdge",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zeroes",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "NOTHING_UP_MY_SLEEVE_ZERO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEdge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addExternalNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "broadcastSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNeighborRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateExternalNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "edgeExistsForChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "edgeIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "edgeList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalNullifierLinkedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstExternalNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestNeighborRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextExternalNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumIdentityCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasEdge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash11", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "insertLeaf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBroadcastPermissioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExternalNullifierActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownNeighborRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastExternalNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxEdges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "neighborRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numExternalNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "packProof", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preBroadcastCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateExternalNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermissioning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpackProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateEdge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeroes", data: BytesLike): Result;

  events: {
    "EdgeAddition(uint256,uint256,bytes32)": EventFragment;
    "EdgeUpdate(uint256,uint256,bytes32)": EventFragment;
    "ExternalNullifierAdd(uint232)": EventFragment;
    "ExternalNullifierChangeStatus(uint232,bool)": EventFragment;
    "LeafInsertion(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PermissionSet(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EdgeAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EdgeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalNullifierAdd"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExternalNullifierChangeStatus"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeafInsertion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionSet"): EventFragment;
}

export type EdgeAdditionEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { chainID: BigNumber; latestLeafIndex: BigNumber; merkleRoot: string }
>;

export type EdgeAdditionEventFilter = TypedEventFilter<EdgeAdditionEvent>;

export type EdgeUpdateEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { chainID: BigNumber; latestLeafIndex: BigNumber; merkleRoot: string }
>;

export type EdgeUpdateEventFilter = TypedEventFilter<EdgeUpdateEvent>;

export type ExternalNullifierAddEvent = TypedEvent<
  [BigNumber],
  { externalNullifier: BigNumber }
>;

export type ExternalNullifierAddEventFilter =
  TypedEventFilter<ExternalNullifierAddEvent>;

export type ExternalNullifierChangeStatusEvent = TypedEvent<
  [BigNumber, boolean],
  { externalNullifier: BigNumber; active: boolean }
>;

export type ExternalNullifierChangeStatusEventFilter =
  TypedEventFilter<ExternalNullifierChangeStatusEvent>;

export type LeafInsertionEvent = TypedEvent<
  [BigNumber, BigNumber],
  { leaf: BigNumber; leafIndex: BigNumber }
>;

export type LeafInsertionEventFilter = TypedEventFilter<LeafInsertionEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PermissionSetEvent = TypedEvent<
  [boolean],
  { newPermission: boolean }
>;

export type PermissionSetEventFilter = TypedEventFilter<PermissionSetEvent>;

export interface LinkableAnchor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LinkableAnchorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NOTHING_UP_MY_SLEEVE_ZERO(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<[number]>;

    addEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    broadcastSignal(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentNeighborRootIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    currentRootIndex(overrides?: CallOverrides): Promise<[number]>;

    deactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    edgeExistsForChain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    edgeIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    edgeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        chainID: BigNumber;
        root: string;
        latestLeafIndex: BigNumber;
      }
    >;

    externalNullifierLinkedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        next: BigNumber;
        exists: boolean;
        isActive: boolean;
      }
    >;

    firstExternalNullifier(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatestNeighborRoots(
      overrides?: CallOverrides
    ): Promise<[string[]] & { roots: string[] }>;

    getNextExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumIdentityCommitments(overrides?: CallOverrides): Promise<[BigNumber]>;

    handler(overrides?: CallOverrides): Promise<[string]>;

    hasEdge(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    insertIdentity(
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insertLeaf(
      _leaf: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBroadcastPermissioned(overrides?: CallOverrides): Promise<[boolean]>;

    isExternalNullifierActive(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownNeighborRoot(
      neighborChainID: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    isValidRoots(
      roots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastExternalNullifier(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxEdges(overrides?: CallOverrides): Promise<[number]>;

    neighborRoots(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nextIndex(overrides?: CallOverrides): Promise<[number]>;

    nullifierHashHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numExternalNullifiers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    packProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    preBroadcastCheck(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _signalHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[BigNumber]>;

    rootHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissioning(
      _newPermission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber],
        [[BigNumber, BigNumber], [BigNumber, BigNumber]],
        [BigNumber, BigNumber]
      ]
    >;

    updateEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    zeroes(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  NOTHING_UP_MY_SLEEVE_ZERO(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

  addEdge(
    sourceChainID: BigNumberish,
    root: BytesLike,
    leafIndex: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addExternalNullifier(
    _externalNullifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  bridge(overrides?: CallOverrides): Promise<string>;

  broadcastSignal(
    _signal: BytesLike,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _roots: BytesLike,
    _nullifiersHash: BigNumberish,
    _externalNullifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentNeighborRootIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  currentRootIndex(overrides?: CallOverrides): Promise<number>;

  deactivateExternalNullifier(
    _externalNullifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  edgeExistsForChain(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  edgeIndex(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  edgeList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      chainID: BigNumber;
      root: string;
      latestLeafIndex: BigNumber;
    }
  >;

  externalNullifierLinkedList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      next: BigNumber;
      exists: boolean;
      isActive: boolean;
    }
  >;

  firstExternalNullifier(overrides?: CallOverrides): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestNeighborRoots(overrides?: CallOverrides): Promise<string[]>;

  getNextExternalNullifier(
    _externalNullifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumIdentityCommitments(overrides?: CallOverrides): Promise<BigNumber>;

  handler(overrides?: CallOverrides): Promise<string>;

  hasEdge(_chainID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  hash11(array: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

  hash5(
    array: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLeftRight(
    _left: BigNumberish,
    _right: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  insertIdentity(
    _identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insertLeaf(
    _leaf: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBroadcastPermissioned(overrides?: CallOverrides): Promise<boolean>;

  isExternalNullifierActive(
    _externalNullifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownNeighborRoot(
    neighborChainID: BigNumberish,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  isValidRoots(roots: BytesLike[], overrides?: CallOverrides): Promise<boolean>;

  lastExternalNullifier(overrides?: CallOverrides): Promise<BigNumber>;

  maxEdges(overrides?: CallOverrides): Promise<number>;

  neighborRoots(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nextIndex(overrides?: CallOverrides): Promise<number>;

  nullifierHashHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numExternalNullifiers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  packProof(
    _a: [BigNumberish, BigNumberish],
    _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    _c: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  preBroadcastCheck(
    _signal: BytesLike,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _roots: BytesLike,
    _nullifiersHash: BigNumberish,
    _signalHash: BigNumberish,
    _externalNullifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reactivateExternalNullifier(
    _externalNullifier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<BigNumber>;

  rootHistory(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setBridge(
    _bridge: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissioning(
    _newPermission: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpackProof(
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber],
      [[BigNumber, BigNumber], [BigNumber, BigNumber]],
      [BigNumber, BigNumber]
    ]
  >;

  updateEdge(
    sourceChainID: BigNumberish,
    root: BytesLike,
    leafIndex: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  zeroes(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NOTHING_UP_MY_SLEEVE_ZERO(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

    addEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    bridge(overrides?: CallOverrides): Promise<string>;

    broadcastSignal(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentNeighborRootIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    currentRootIndex(overrides?: CallOverrides): Promise<number>;

    deactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    edgeExistsForChain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    edgeIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    edgeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        chainID: BigNumber;
        root: string;
        latestLeafIndex: BigNumber;
      }
    >;

    externalNullifierLinkedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        next: BigNumber;
        exists: boolean;
        isActive: boolean;
      }
    >;

    firstExternalNullifier(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestNeighborRoots(overrides?: CallOverrides): Promise<string[]>;

    getNextExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumIdentityCommitments(overrides?: CallOverrides): Promise<BigNumber>;

    handler(overrides?: CallOverrides): Promise<string>;

    hasEdge(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insertIdentity(
      _identityCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insertLeaf(
      _leaf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBroadcastPermissioned(overrides?: CallOverrides): Promise<boolean>;

    isExternalNullifierActive(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownNeighborRoot(
      neighborChainID: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    isValidRoots(
      roots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastExternalNullifier(overrides?: CallOverrides): Promise<BigNumber>;

    maxEdges(overrides?: CallOverrides): Promise<number>;

    neighborRoots(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nextIndex(overrides?: CallOverrides): Promise<number>;

    nullifierHashHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numExternalNullifiers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    packProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    preBroadcastCheck(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _signalHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    rootHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setBridge(_bridge: string, overrides?: CallOverrides): Promise<void>;

    setHandler(_handler: string, overrides?: CallOverrides): Promise<void>;

    setPermissioning(
      _newPermission: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber],
        [[BigNumber, BigNumber], [BigNumber, BigNumber]],
        [BigNumber, BigNumber]
      ]
    >;

    updateEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    zeroes(i: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EdgeAddition(uint256,uint256,bytes32)"(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeAdditionEventFilter;
    EdgeAddition(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeAdditionEventFilter;

    "EdgeUpdate(uint256,uint256,bytes32)"(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeUpdateEventFilter;
    EdgeUpdate(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeUpdateEventFilter;

    "ExternalNullifierAdd(uint232)"(
      externalNullifier?: BigNumberish | null
    ): ExternalNullifierAddEventFilter;
    ExternalNullifierAdd(
      externalNullifier?: BigNumberish | null
    ): ExternalNullifierAddEventFilter;

    "ExternalNullifierChangeStatus(uint232,bool)"(
      externalNullifier?: BigNumberish | null,
      active?: boolean | null
    ): ExternalNullifierChangeStatusEventFilter;
    ExternalNullifierChangeStatus(
      externalNullifier?: BigNumberish | null,
      active?: boolean | null
    ): ExternalNullifierChangeStatusEventFilter;

    "LeafInsertion(uint256,uint256)"(
      leaf?: BigNumberish | null,
      leafIndex?: BigNumberish | null
    ): LeafInsertionEventFilter;
    LeafInsertion(
      leaf?: BigNumberish | null,
      leafIndex?: BigNumberish | null
    ): LeafInsertionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PermissionSet(bool)"(
      newPermission?: boolean | null
    ): PermissionSetEventFilter;
    PermissionSet(newPermission?: boolean | null): PermissionSetEventFilter;
  };

  estimateGas: {
    NOTHING_UP_MY_SLEEVE_ZERO(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    addEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    broadcastSignal(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentNeighborRootIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRootIndex(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    edgeExistsForChain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    edgeIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    edgeList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    externalNullifierLinkedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstExternalNullifier(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestNeighborRoots(overrides?: CallOverrides): Promise<BigNumber>;

    getNextExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumIdentityCommitments(overrides?: CallOverrides): Promise<BigNumber>;

    handler(overrides?: CallOverrides): Promise<BigNumber>;

    hasEdge(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insertIdentity(
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insertLeaf(
      _leaf: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBroadcastPermissioned(overrides?: CallOverrides): Promise<BigNumber>;

    isExternalNullifierActive(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownNeighborRoot(
      neighborChainID: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isValidRoots(
      roots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastExternalNullifier(overrides?: CallOverrides): Promise<BigNumber>;

    maxEdges(overrides?: CallOverrides): Promise<BigNumber>;

    neighborRoots(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nullifierHashHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numExternalNullifiers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    packProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    preBroadcastCheck(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _signalHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    rootHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissioning(
      _newPermission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    zeroes(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NOTHING_UP_MY_SLEEVE_ZERO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    broadcastSignal(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentNeighborRootIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRootIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    edgeExistsForChain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    edgeIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    edgeList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    externalNullifierLinkedList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstExternalNullifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestNeighborRoots(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumIdentityCommitments(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasEdge(
      _chainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash11(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insertIdentity(
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insertLeaf(
      _leaf: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBroadcastPermissioned(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExternalNullifierActive(
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownNeighborRoot(
      neighborChainID: BigNumberish,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidRoots(
      roots: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastExternalNullifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxEdges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    neighborRoots(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nullifierHashHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numExternalNullifiers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packProof(
      _a: [BigNumberish, BigNumberish],
      _b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      _c: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preBroadcastCheck(
      _signal: BytesLike,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _roots: BytesLike,
      _nullifiersHash: BigNumberish,
      _signalHash: BigNumberish,
      _externalNullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reactivateExternalNullifier(
      _externalNullifier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBridge(
      _bridge: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissioning(
      _newPermission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpackProof(
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateEdge(
      sourceChainID: BigNumberish,
      root: BytesLike,
      leafIndex: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zeroes(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
